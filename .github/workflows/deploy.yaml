name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install databricks CLI
      run: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install azure-identity azure-keyvault-secrets requests

    - name: Retrieve secrets from Azure Key Vault
      id: set-env
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_KEY_VAULT_NAME: ${{ secrets.AZURE_KEY_VAULT_NAME }}
      run: |
        echo "Retrieving secrets from Azure Key Vault..."
        python -c "
        import os
        from azure.identity import DefaultAzureCredential
        from azure.keyvault.secrets import SecretClient

        key_vault_name = os.getenv('AZURE_KEY_VAULT_NAME')
        key_vault_uri = f'https://{key_vault_name}.vault.azure.net'

        credential = DefaultAzureCredential()
        client = SecretClient(vault_url=key_vault_uri, credential=credential)

        databricks_host = client.get_secret('cdv-big-data-adb-url').value
        databricks_token = client.get_secret('cdv-big-data-adb-token').value

        print(f'::set-output name=databricks_host::{databricks_host}')
        print(f'::set-output name=databricks_token::{databricks_token}')
        "

  CD:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        python -m pip install requests

    - name: Configure Databricks CLI
      run: |
        databricks configure --token <<< "${{ needs.setup.outputs.databricks_host }}\n${{ needs.setup.outputs.databricks_token }}"

    - name: Read ORC Ingestion Config
      id: read-config
      run: |
        orc_ingestion_config=$(cat orc_ingestion.json)
        echo "::set-output name=orc_ingestion_config::$orc_ingestion_config"

    - name: Deploy Workflow using REST API
      run: |
        python -c "
        import os
        import json
        import requests

        databricks_host = os.getenv('DATBRICKS_HOST')
        databricks_token = os.getenv('DATBRICKS_TOKEN')
        orc_ingestion_config = json.loads('${{ steps.read-config.outputs.orc_ingestion_config }}')

        headers = {
            'Authorization': f'Bearer {databricks_token}',
            'Content-Type': 'application/json'
        }

        response = requests.post(f'{databricks_host}/api/2.2/jobs/create', headers=headers, json=orc_ingestion_config)
        response.raise_for_status()
        print(response.json())
        "
      env:
        DATBRICKS_HOST: ${{ needs.setup.outputs.databricks_host }}
        DATBRICKS_TOKEN: ${{ needs.setup.outputs.databricks_token }}